<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard Pemantauan Rumput Jalan Tol</title>
  
  <!-- Google Fonts for better typography -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />

  <!-- Chart.js for data visualization -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <style>
    :root {
      --primary-color: #005A8D;
      --secondary-color: #00A8E8;
      --bg-color: #f4f7fa;
      --card-bg: #ffffff;
      --text-color: #333;
      --text-muted: #777;
      --border-color: #e0e0e0;
      --status-safe: #4CAF50;
      --status-warning: #FFC107;
      --status-danger: #F44336;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      margin: 0;
      line-height: 1.6;
    }

    .container {
      max-width: 1600px;
      margin: 0 auto;
      padding: 20px;
    }

    header {
      background-color: var(--card-bg);
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      margin-bottom: 20px;
      border-radius: 8px;
    }

    header h1 {
      color: var(--primary-color);
      font-size: 1.8rem;
      margin: 0;
    }

    .actions button {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 0.9rem;
      font-weight: 500;
      transition: background-color 0.3s;
      margin-left: 10px;
    }

    .actions button:hover {
      background-color: #004a75;
    }

    .dashboard-grid {
      display: grid;
      grid-template-columns: 350px 1fr;
      gap: 20px;
    }
    
    #segment-list-container {
      background-color: var(--card-bg);
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      height: calc(100vh - 120px);
      overflow-y: auto;
    }

    #segment-list-container h2 {
      margin-top: 0;
      color: var(--primary-color);
    }

    .segment-card {
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 10px;
      cursor: pointer;
      transition: all 0.2s ease-in-out;
      border-left: 5px solid var(--border-color);
    }
    
    .segment-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .segment-card.active {
      border-color: var(--secondary-color);
      border-left-color: var(--secondary-color);
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .segment-card h3 {
      font-size: 1rem;
      margin: 0 0 10px 0;
    }

    .segment-info {
      display: flex;
      justify-content: space-between;
      font-size: 0.85rem;
    }

    .grass-height {
      font-weight: bold;
    }
    
    .status-safe { border-left-color: var(--status-safe); }
    .status-warning { border-left-color: var(--status-warning); }
    .status-danger { border-left-color: var(--status-danger); }

    .color-safe { color: var(--status-safe); }
    .color-warning { color: var(--status-warning); }
    .color-danger { color: var(--status-danger); }

    #segment-detail-container {
      background-color: var(--card-bg);
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
      height: calc(100vh - 120px);
      overflow-y: auto;
    }

    .detail-placeholder, .loading-placeholder {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 100%;
      color: var(--text-muted);
      text-align: center;
    }
    
    .loading-placeholder i {
      font-size: 3rem;
      margin-bottom: 20px;
      animation: spin 1.5s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .detail-section {
      margin-bottom: 30px;
    }

    .detail-section h3 {
      color: var(--primary-color);
      border-bottom: 2px solid var(--secondary-color);
      padding-bottom: 10px;
      margin-bottom: 15px;
    }
    
    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }

    .info-item {
      background-color: var(--bg-color);
      padding: 15px;
      border-radius: 5px;
    }
    
    .info-item .label {
      font-size: 0.8rem;
      color: var(--text-muted);
      margin-bottom: 5px;
    }
    
    .info-item .value {
      font-size: 1rem;
      font-weight: 500;
    }
    
    .weather-forecast {
      display: flex;
      gap: 15px;
      overflow-x: auto;
      padding-bottom: 15px; /* for scrollbar */
    }

    .weather-card {
      flex: 0 0 130px;
      background-color: var(--bg-color);
      border-radius: 8px;
      padding: 15px;
      text-align: center;
    }
    
    .weather-card img {
      width: 50px;
      height: 50px;
      margin-bottom: 10px;
    }
    
    .weather-card .time {
      font-size: 0.8rem;
      font-weight: 500;
      color: var(--text-muted);
    }

    .weather-card .desc {
      font-size: 0.9rem;
      font-weight: 500;
      margin: 5px 0;
    }
    
    .weather-card .temp {
      font-size: 1.2rem;
      font-weight: bold;
      color: var(--primary-color);
    }
    
    .detail-grid-2-col {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 30px;
    }

    .soil-container {
        display: grid;
        grid-template-columns: 200px 1fr;
        gap: 20px;
        align-items: center;
    }

    #soilChartContainer {
        position: relative;
        height: 200px;
        width: 200px;
    }

    #soil-list, #grass-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    #soil-list li, #grass-list li {
        margin-bottom: 10px;
        font-size: 0.9rem;
        display: flex;
        align-items: center;
    }

    #soil-list .percentage, #grass-list .percentage {
        font-weight: bold;
        display: inline-block;
        width: 50px;
        color: var(--primary-color);
    }

    #notification-area {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 15px 25px;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.3);
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.5s, visibility 0.5s;
    }

    #notification-area.show {
      opacity: 1;
      visibility: visible;
    }

    /* Responsive */
    @media (max-width: 992px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
      #segment-list-container, #segment-detail-container {
        height: auto;
      }
      .soil-container {
        grid-template-columns: 1fr;
        text-align: center;
      }
      #soilChartContainer {
        margin: 0 auto 20px;
      }
    }
    
    @media (max-width: 768px) {
      header {
        flex-direction: column;
        gap: 15px;
      }
    }

  </style>
</head>
<body>

  <div class="container">
    <header>
      <h1><i class="fas fa-road"></i> Dashboard Rumput Tol</h1>
      <div class="actions">
        <button id="updateAllHeightsBtn"><i class="fas fa-ruler-vertical"></i> Update Semua Ketinggian</button>
        <button id="fetchWeatherBtn"><i class="fas fa-cloud-sun-rain"></i> Ambil Data Cuaca</button>
      </div>
    </header>

    <main class="dashboard-grid">
      <aside id="segment-list-container">
        <h2>Daftar Segmen</h2>
        <div id="segment-list">
          <div class="loading-placeholder"><i class="fas fa-spinner"></i> Memuat Segmen...</div>
        </div>
      </aside>

      <section id="segment-detail-container">
        <div class="detail-placeholder">
          <i class="fas fa-arrow-left" style="font-size: 3rem; margin-bottom: 20px;"></i>
          <h2>Pilih segmen di sebelah kiri</h2>
          <p>Klik salah satu kartu segmen untuk melihat informasi detailnya.</p>
        </div>
      </section>
    </main>
  </div>
  
  <div id="notification-area"></div>

  <script>
    // --- DOM Elements ---
    const segmentListDiv = document.getElementById('segment-list');
    const segmentDetailContainer = document.getElementById('segment-detail-container');
    const updateAllHeightsBtn = document.getElementById('updateAllHeightsBtn');
    const fetchWeatherBtn = document.getElementById('fetchWeatherBtn');
    const notificationArea = document.getElementById('notification-area');

    let allSegmentsData = [];
    let soilChartInstance = null;
    
    // --- UTILITY FUNCTIONS ---
    
    function getStatusByHeight(height) {
      const h = parseFloat(height);
      if (h >= 0.15) return { class: 'status-danger', colorClass: 'color-danger', label: 'Perlu Pemotongan' };
      if (h >= 0.10) return { class: 'status-warning', colorClass: 'color-warning', label: 'Perlu Perhatian' };
      return { class: 'status-safe', colorClass: 'color-safe', label: 'Aman' };
    }

    function formatReadableDate(dateString) {
      if (!dateString) return 'N/A';
      return new Date(dateString).toLocaleString('id-ID', { day: 'numeric', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit' });
    }

    function showNotification(message, isError = false) {
      notificationArea.textContent = message;
      notificationArea.style.backgroundColor = isError ? 'var(--status-danger)' : '#333';
      notificationArea.classList.add('show');
      setTimeout(() => notificationArea.classList.remove('show'), 5000);
    }

    // --- RENDER FUNCTIONS ---
    
    function renderSegmentList(segments) {
      segmentListDiv.innerHTML = '';
      if (!segments || segments.length === 0) {
        segmentListDiv.innerHTML = '<p>Tidak ada data segmen yang ditemukan.</p>';
        return;
      }
      
      segments.forEach(seg => {
        const status = getStatusByHeight(seg.estimated_height_now);
        const card = document.createElement('div');
        card.className = `segment-card ${status.class}`;
        card.dataset.id = seg.id;
        
        card.innerHTML = `<h3>${seg.name}</h3><div class="segment-info"><span>Status: <strong class="${status.colorClass}">${status.label}</strong></span><span class="grass-height"><i class="fas fa-ruler"></i> ${(seg.estimated_height_now * 100).toFixed(1)} cm</span></div>`;
        
        card.addEventListener('click', () => {
          document.querySelectorAll('.segment-card').forEach(c => c.classList.remove('active'));
          card.classList.add('active');
          showSegmentDetails(seg.id);
        });
        
        segmentListDiv.appendChild(card);
      });
    }

    async function showSegmentDetails(segmentId) {
      segmentDetailContainer.innerHTML = `<div class="loading-placeholder"><i class="fas fa-spinner"></i><h2>Memuat Detail Segmen...</h2></div>`;

      try {
        const segmentData = allSegmentsData.find(s => s.id == segmentId);
        
        const [weatherRes, soilGrassRes] = await Promise.all([
          fetch(`/api/segments/${segmentId}/weather`),
          fetch(`/api/segments/${segmentId}/soil-grass`)
        ]);

        if (!weatherRes.ok || !soilGrassRes.ok) throw new Error('Gagal mengambil data detail segmen.');

        const weatherData = await weatherRes.json();
        const soilGrassData = await soilGrassRes.json();
        
        renderDetailContent(segmentData, weatherData, soilGrassData);
        
      } catch (error) {
        console.error('Error fetching segment details:', error);
        segmentDetailContainer.innerHTML = `<div class="detail-placeholder"><i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: var(--status-danger)"></i><h2>Gagal Memuat Data</h2><p>Terjadi kesalahan saat mengambil data. Silakan coba lagi.</p></div>`;
      }
    }

    // --- KUNCI PERUBAHAN ADA DI FUNGSI INI ---
    // Sekarang `soilGrass` adalah objek { soils: [], grasses: [] }
    function renderDetailContent(segment, weather, soilGrass) {
        const status = getStatusByHeight(segment.estimated_height_now);
        
        segmentDetailContainer.innerHTML = `
          <h2>Detail Segmen: ${segment.name}</h2>
          
          <section class="detail-section">
            <h3><i class="fas fa-info-circle"></i> Informasi Umum</h3>
            <div class="info-grid">
              <div class="info-item"><div class="label">Status Saat Ini</div><div class="value ${status.colorClass}">${status.label}</div></div>
              <div class="info-item"><div class="label">Tinggi Rumput</div><div class="value">${(segment.estimated_height_now * 100).toFixed(1)} cm</div></div>
              <div class="info-item"><div class="label">Estimasi Tinggi (3 Hari)</div><div class="value">${(segment.estimated_height_in_3_days * 100).toFixed(1)} cm</div></div>
              <div class="info-item"><div class="label">Panjang Segmen</div><div class="value">${(segment.panjang / 1000).toFixed(2)} km</div></div>
              <div class="info-item"><div class="label">Lokasi</div><div class="value">${segment.adm4}</div></div>
              <div class="info-item"><div class="label">Update Terakhir</div><div class="value">${formatReadableDate(segment.last_updated_calculation_date)}</div></div>
            </div>
          </section>

          <section class="detail-section">
            <h3><i class="fas fa-cloud"></i> Ramalan Cuaca (3 Hari)</h3>
            <div class="weather-forecast">${generateWeatherHTML(weather)}</div>
          </section>
          
          <div class="detail-grid-2-col">
              <section class="detail-section">
                <h3><i class="fas fa-mountain"></i> Komposisi Tanah</h3>
                <div class="soil-container">
                  <div id="soilChartContainer"><canvas id="soilChart"></canvas></div>
                  <div id="soil-legend">${generateSoilLegendHTML(soilGrass.soils)}</div>
                </div>
              </section>

              <section class="detail-section">
                <h3><i class="fas fa-seedling"></i> Jenis Rumput Dominan</h3>
                <div id="grass-list-container">${generateGrassListHTML(soilGrass.grasses)}</div>
              </section>
          </div>
        `;
        
        // Kirim hanya data tanah ke fungsi chart
        renderSoilChart(soilGrass.soils);
    }
    
    function generateWeatherHTML(weatherData) {
        let html = '';
        const allForecasts = weatherData?.jsons?.data?.[0]?.cuaca?.flat()?.slice(0, 24) || [];
        if (allForecasts.length === 0) return '<p>Data cuaca tidak tersedia.</p>';

        allForecasts.forEach(forecast => {
            const time = new Date(forecast.local_datetime);
            html += `<div class="weather-card"><div class="time">${time.toLocaleDateString('id-ID', {weekday: 'short'})}, ${time.getHours()}:00</div><img src="${forecast.image}" alt="${forecast.weather_desc}"><div class="desc">${forecast.weather_desc}</div><div class="temp">${forecast.t}°C</div><div class="details" style="font-size:0.8rem; color: var(--text-muted)"><span><i class="fas fa-tint"></i> ${forecast.hu}%</span><span style="margin-left:5px;"><i class="fas fa-wind"></i> ${forecast.ws} m/s</span></div></div>`;
        });
        return html;
    }

    function generateSoilLegendHTML(soils) {
        if (!soils || soils.length === 0) return '<p>Data tanah tidak tersedia.</p>';
        let html = '<ul id="soil-list">';
        [...soils].sort((a, b) => b.percentage - a.percentage).forEach(item => {
            html += `<li><span class="percentage">${item.percentage}%</span><strong>${item.soil_name}</strong></li>`;
        });
        return html + '</ul>';
    }

    function generateGrassListHTML(grasses) {
        if (!grasses || grasses.length === 0) return '<p>Data jenis rumput tidak tersedia.</p>';
        let html = '<ul id="grass-list">';
        [...grasses].sort((a, b) => b.percentage - a.percentage).forEach(item => {
            html += `<li><span class="percentage">${item.percentage}%</span><span>${item.grass_name}</span></li>`;
        });
        return html + '</ul>';
    }

    function renderSoilChart(soils) {
      const ctx = document.getElementById('soilChart')?.getContext('2d');
      if (!ctx || !soils || soils.length === 0) return;

      if (soilChartInstance) soilChartInstance.destroy();

      const labels = soils.map(item => item.soil_name);
      const data = soils.map(item => item.percentage);
      const backgroundColors = ['#4CAF50','#8BC34A','#CDDC39','#FFEB3B','#FFC107','#FF9800','#a1887f','#795548','#5d4037','#bcaaa4'];
      const cardBgColor = getComputedStyle(document.documentElement).getPropertyValue('--card-bg').trim();

      soilChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{ data: data, backgroundColor: backgroundColors, borderColor: cardBgColor, borderWidth: 3 }]
        },
        options: {
          responsive: true, maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: { callbacks: { label: (context) => `${context.label}: ${context.parsed}%` }}
          }
        }
      });
    }

    // --- EVENT LISTENERS for global actions ---
    
    updateAllHeightsBtn.addEventListener('click', async () => {
      showNotification('Memperbarui ketinggian rumput...', false);
      try {
        const res = await fetch('/api/segment/height', { method: 'POST' });
        const result = await res.json();
        let message = result.message;
        if (result.nextAllowed) message += ` Coba lagi setelah: ${formatReadableDate(result.nextAllowed)}`;
        showNotification(message, !res.ok);
        if (res.ok) loadAllSegments();
      } catch (error) { showNotification('Gagal terhubung ke server.', true); }
    });
    
    fetchWeatherBtn.addEventListener('click', async () => {
      showNotification('Mengambil data cuaca...', false);
      try {
        const res = await fetch('/api/weather', { method: 'POST' });
        const result = await res.json();
        const skippedCount = result.result?.filter(r => r.skipped).length || 0;
        const totalCount = result.result?.length || 0;
        let message = `${result.message}. ${totalCount - skippedCount} segmen diperbarui, ${skippedCount} dilewati.`;
        showNotification(message, !res.ok);
      } catch (error) { showNotification('Gagal terhubung ke server.', true); }
    });

    // --- INITIAL LOAD ---
    
    async function loadAllSegments() {
      try {
        const res = await fetch('/api/segments');
        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
        allSegmentsData = await res.json();
        renderSegmentList(allSegmentsData);
      } catch (error) {
        console.error("Failed to load segments:", error);
        segmentListDiv.innerHTML = `<p style="color: var(--status-danger);">Gagal memuat data segmen. Periksa koneksi ke server.</p>`;
      }
    }

    document.addEventListener('DOMContentLoaded', loadAllSegments);

  </script>
</body>
</html>